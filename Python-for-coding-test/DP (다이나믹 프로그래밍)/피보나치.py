"""
# 단순 재귀 코드
수열의 점화식 : 인접한 항들 사이의 관계식
- 재귀 함수로 표현 가능
- 다이나믹 프로그래밍 사용하면 효율적으로 해결 가능
"""


# 피보나치 함수(Fibonacci Function)을 재귀함수로 구현
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)


print(fibo(4))

"""
# 다이나믹 프로그래밍
- 최적 부분 구조
- 중복되는 부분 문제
- 메모이제이션 기법 => 캐싱
- DP 테이블 사용
"""

"""
# 탑다운 다이나믹 프로그래밍
메모이제이션 & 재귀함수
"""
# 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100


# 피보나치 함수(Fibonacci Function)를 재귀함수로 구현 (탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건(1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]


print(fibo(9))
print(d)

"""
# 보텀업 다이나믹 프로그래밍
DP 테이블 & 반복문
"""
# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수(Fibonacci Function) 반복문으로 구현(보텀업 다이나믹 프로그래밍)
for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]

print(d[n])
